<MudTextField UserAttributes="@(new (){{"id","txtClientId"}})" Label="Client ID"
              @bind-Value="Application.ClientId" For="@(() => Application.ClientId)" />
<MudTextField UserAttributes="@(new (){{"id","txtDisplayName"}})" Label="Display Name" Class="mt-3"
              @bind-Value="Application.DisplayName" For="@(() => Application.DisplayName)" />

<MudStack Row="true" Spacing="3" Class="mt-3">
    <MudItem xs="2">
        <MudSelect UserAttributes="@(new (){{"id","cbApplicationType"}})" T="string" Label="Application Type" @bind-Value="Application.ApplicationType">
            <MudSelectItem Value="@("web")" />
            <MudSelectItem Value="@("native")" />
        </MudSelect>
    </MudItem>
    <MudItem xs="2">
        <MudSelect UserAttributes="@(new (){{"id","cbConsentType"}})" T="string" Label="Consent Type" @bind-Value="Application.ConsentType">
            <MudSelectItem Value="@("explicit")" />
            <MudSelectItem Value="@("external")" />
            <MudSelectItem Value="@("implicit")" />
            <MudSelectItem Value="@("systematic")" />
        </MudSelect>
        <ValidationMessage For="() => Application.ConsentType"></ValidationMessage>
    </MudItem>
    <MudItem xs="2">
        <MudSelect UserAttributes="@(new (){{"id","cbClientType"}})" T="string" Label="Client Type" @bind-Value="Application.ClientType">
            <MudSelectItem Value="@("public")" />
            <MudSelectItem Value="@("confidential")" />
        </MudSelect>
        <ValidationMessage For="() => Application.ClientType"></ValidationMessage>
    </MudItem>
    <MudItem xs="6">
        @if (Application.IsConfidentialClient)
        {

            <MudTextField UserAttributes="@(new (){{"id","txtClientSecret"}})" @bind-Value="Application.ClientSecret" Label="Client Secret" Variant="Variant.Text"
                          InputType="@passwordInputFieldType" Adornment="Adornment.End" AdornmentColor="Color.Primary"
                          AdornmentIcon="@passwordInputIcon" OnAdornmentClick="OnTogglePasswordVisibility" />
            <ValidationMessage For="() => Application.ClientSecret"></ValidationMessage>
        }
    </MudItem>
</MudStack>
@if (Application.IsConfidentialClient)
{
    <MudTextField UserAttributes="@(new (){{"id","txtJsonWebKeySet"}})" T="string" Label="Json Web Key Set" Variant="Variant.Text" @bind-Value="@Application.JsonWebKeySet" AutoGrow HelperText="public key of ECDSA private/public key pair used by the server to validate the client assertions" />
    <ValidationMessage For="() => Application.JsonWebKeySet"></ValidationMessage>
}

<br />

@if(Application.Permissions.Contains(OpenIddict.Abstractions.OpenIddictConstants.Permissions.GrantTypes.AuthorizationCode))
{
    <div id="redirectUriCollection">
        <div class="d-flex flex-wrap">
            <MudText Typo="Typo.h6" Class="mt-2">Redirect Uris</MudText>
            <MudIconButton UserAttributes="@(new (){{"id","btnAddRedirectUri"}})" Icon="@Icons.Material.Outlined.AddCircleOutline" Size="Size.Medium"
                       @onclick="AddRedirectUri" Color="Color.Primary"></MudIconButton>
        </div>
        <ValidationMessage For="() => Application.RedirectUris"></ValidationMessage>
        <EditableCollection TItem="Uri" TValue="string" ItemSize="12" OnDeleteItem="@RemoveRedirectUri"
                        Items="(Application.RedirectUris ?? Enumerable.Empty<Uri>())">
            <ItemTemplate Context="item">
                <MudText Color="Color.Info" Class="ml-2" Typo="Typo.subtitle1">@item.ToString()</MudText>
            </ItemTemplate>
        </EditableCollection>
    </div>
     <br />

     <div id="postLogoutRedirectUriCollection">     
        <div class="d-flex flex-wrap">
            <MudText Typo="Typo.h6" Class="mt-2">Post Logout Redirect Uris</MudText>
            <MudIconButton UserAttributes="@(new (){{"id","btnAddPostLogoutRedirectUri"}})" Icon="@Icons.Material.Outlined.AddCircleOutline" Size="Size.Medium"
                       @onclick="AddPostLogoutRedirectUri" Color="Color.Primary"></MudIconButton>
        </div>
        <ValidationMessage For="() => Application.PostLogoutRedirectUris"></ValidationMessage>
        <EditableCollection TItem="Uri" TValue="string" ItemSize="12"
                        OnDeleteItem="@RemovePostLogoutRedirectUri"
                            Items="(Application.PostLogoutRedirectUris ?? Enumerable.Empty<Uri>())">
            <ItemTemplate Context="item">
                <MudText Color="Color.Info" Class="ml-2" Typo="Typo.subtitle1">@item.ToString()</MudText>
            </ItemTemplate>
        </EditableCollection>
    </div>
    <br />
}

<MudText Typo="Typo.h6">Permissions</MudText>
<ValidationMessage For="() => Application.Permissions"></ValidationMessage>
<br />
<MudExpansionPanels MultiExpansion="true" Elevation="1">
    <MudExpansionPanel Text="EndPoint Permissions" IsInitiallyExpanded="true">
        <ToggleItemCollection Items="endPointPermissions" OnToggle="TogglePermission" />
    </MudExpansionPanel>
    <MudExpansionPanel Text="Grant Type Permissions" IsInitiallyExpanded="true">
        <ToggleItemCollection Items="grantTypePermissions" ItemSize="3" OnToggle="TogglePermission" />
    </MudExpansionPanel>
    <MudExpansionPanel IsInitiallyExpanded="true">
        <TitleContent>
            <div class="d-flex">
                <MudText>Scope Permissions</MudText>
                <MudIconButton UserAttributes="@(new (){{"id","btnAddScope"}})" Icon="@Icons.Material.Outlined.AddCircleOutline" Size="Size.Medium"
                               Title="Add custom scope"
                               @onclick="AddScope" Color="Color.Primary" Class="ml-3" Style="padding:0;"></MudIconButton>
            </div>
        </TitleContent>
        <ChildContent>
            <ToggleItemCollection Items="scopePermissions" OnToggle="TogglePermission" />
        </ChildContent>
    </MudExpansionPanel>
    <MudExpansionPanel Text="Response Type Permissions" IsInitiallyExpanded="true">
        <MudGrid Spacing="2">
            <ToggleItemCollection Items="responseTypePermissions" OnToggle="TogglePermission" />
        </MudGrid>
    </MudExpansionPanel>
</MudExpansionPanels>
<br />

<MudText Typo="Typo.h6">Requirements</MudText>
<br />
<MudExpansionPanels MultiExpansion="true" Elevation="1">
    <MudExpansionPanel Text="Application requirements" IsInitiallyExpanded="true">
        <ToggleItemCollection Items="requirements" OnToggle="ToggleRequirement" />
    </MudExpansionPanel>
</MudExpansionPanels>
<br />

<MudText Typo="Typo.h6">Settings</MudText>
<br />
<MudExpansionPanels MultiExpansion="true" Elevation="1">
    <MudExpansionPanel id="settingsPanel" IsInitiallyExpanded="true">
        <TitleContent>
            <div class="d-flex">
                <MudText>Token LifeTimes</MudText>
                <MudIconButton UserAttributes="@(new (){{"id","btnAddSetting"}})" Icon="@Icons.Material.Outlined.AddCircleOutline" Size="Size.Medium"
                               Title="Add a new setting"
                               @onclick="AddSetting" Color="Color.Primary" Class="ml-3" Style="padding:0;"></MudIconButton>
            </div>
        </TitleContent>
        <ChildContent>
            <EditableCollection TItem="KeyValuePair<string,string>" TValue="KeyValuePair<string,string>" ItemSize="3" Spacing="2"
                                OnDeleteItem="@RemoveSetting"
                                Items="(Application.Settings ?? new())">
                <ItemTemplate Context="item">
                    <MudText Color="Color.Info" UserAttributes="@(new (){{"id", item.Key}})" Class="ml-2" Typo="Typo.subtitle1">@($"{Pixel.Identity.Shared.Helpers.TokenLifeTimesHelper.GetNameFromValue(item.Key)} : {item.Value}")</MudText>
                </ItemTemplate>
            </EditableCollection>
        </ChildContent>       
    </MudExpansionPanel>
</MudExpansionPanels>
<br />